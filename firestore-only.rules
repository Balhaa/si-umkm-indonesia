rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions untuk authentication dan authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function hasValidUserData() {
      return request.resource.data.keys().hasAll(['email', 'createdAt']) &&
             request.resource.data.email is string &&
             request.resource.data.createdAt is timestamp;
    }
    
    function isValidUpdate() {
      // Mencegah update field sensitif
      return !request.resource.data.diff(resource.data).affectedKeys()
             .hasAny(['createdAt', 'uid']);
    }
    
    // Users collection - user bisa read/write data mereka sendiri
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && 
                       isOwner(userId) && 
                       hasValidUserData();
      allow update: if isAuthenticated() && 
                       isOwner(userId) && 
                       isValidUpdate();
      allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
      
      // User's private subcollections
      match /private/{document=**} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      // User's public profile (bisa dibaca semua authenticated users)
      match /profile/{document=**} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && isOwner(userId);
      }
    }
    
    // Posts collection dengan base64 images (alternatif Storage)
    match /posts/{postId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && 
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['title', 'content', 'authorId', 'createdAt']);
      allow update: if isAuthenticated() && 
                       (resource.data.authorId == request.auth.uid || isAdmin()) &&
                       isValidUpdate();
      allow delete: if isAuthenticated() && 
                       (resource.data.authorId == request.auth.uid || isAdmin());
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() && 
                         request.resource.data.authorId == request.auth.uid;
        allow update: if isAuthenticated() && 
                         resource.data.authorId == request.auth.uid;
        allow delete: if isAuthenticated() && 
                         (resource.data.authorId == request.auth.uid || isAdmin());
      }
    }
    
    // File metadata collection (untuk tracking file tanpa Storage)
    match /file_metadata/{fileId} {
      allow read: if isAuthenticated() && 
                     (resource.data.ownerId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
                       request.resource.data.ownerId == request.auth.uid;
      allow update: if isAuthenticated() && 
                       resource.data.ownerId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                       (resource.data.ownerId == request.auth.uid || isAdmin());
    }
    
    // Organizations collection
    match /organizations/{orgId} {
      allow read: if isAuthenticated() && 
                     (request.auth.uid in resource.data.members || isAdmin());
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.ownerId;
      allow update: if isAuthenticated() && 
                       (request.auth.uid == resource.data.ownerId || 
                        request.auth.uid in resource.data.admins);
      allow delete: if isAuthenticated() && 
                       (request.auth.uid == resource.data.ownerId || isAdmin());
    }
    
    // Admin-only collections
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
    }
    
    // Default deny rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
